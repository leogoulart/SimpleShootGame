//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/Scripts/Misc/GameControlls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @GameControlls : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @GameControlls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""GameControlls"",
    ""maps"": [
        {
            ""name"": ""PlayerMap"",
            ""id"": ""ed14bcdd-7d74-400a-9b22-75a7f8ea3fa7"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""56fe3e9c-e35a-48df-987e-f9501ad585a3"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Running"",
                    ""type"": ""Button"",
                    ""id"": ""3ab447a3-b6c5-4f5f-b5ff-19c7209f7bec"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Interaction"",
                    ""type"": ""Button"",
                    ""id"": ""323504ac-bc1a-48d8-b499-e5350e4eee8d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WASD"",
                    ""id"": ""62577f70-c4e9-4500-bbe9-5fb4cb16d01f"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""1ca097f7-8f27-45ee-bc4d-ed5df8ee0cdd"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard and Mouse"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""4eb293ee-5060-42e7-9957-ef372e99127b"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard and Mouse"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""1beab6e9-da15-49c9-b52d-b5861de4996a"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard and Mouse"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""8962328d-cd3d-40ab-9717-c35142db1dff"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard and Mouse"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""51f148ef-4d1b-4264-b42c-1ed4ea203bc0"",
                    ""path"": ""<Keyboard>/leftShift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard and Mouse"",
                    ""action"": ""Running"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""712cdde7-999f-4952-8dfa-7415b3a9e605"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Interaction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""GeneralMap"",
            ""id"": ""bf6716c6-afa7-44f8-b44b-6b98291f4d3b"",
            ""actions"": [
                {
                    ""name"": ""PauseUnpause"",
                    ""type"": ""Button"",
                    ""id"": ""2a25558f-dd3a-4d04-9000-08116062c768"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""0dc23621-b6be-4ef9-8003-a24d3d7e6c06"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard and Mouse"",
                    ""action"": ""PauseUnpause"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Keyboard and Mouse"",
            ""bindingGroup"": ""Keyboard and Mouse"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // PlayerMap
        m_PlayerMap = asset.FindActionMap("PlayerMap", throwIfNotFound: true);
        m_PlayerMap_Movement = m_PlayerMap.FindAction("Movement", throwIfNotFound: true);
        m_PlayerMap_Running = m_PlayerMap.FindAction("Running", throwIfNotFound: true);
        m_PlayerMap_Interaction = m_PlayerMap.FindAction("Interaction", throwIfNotFound: true);
        // GeneralMap
        m_GeneralMap = asset.FindActionMap("GeneralMap", throwIfNotFound: true);
        m_GeneralMap_PauseUnpause = m_GeneralMap.FindAction("PauseUnpause", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // PlayerMap
    private readonly InputActionMap m_PlayerMap;
    private IPlayerMapActions m_PlayerMapActionsCallbackInterface;
    private readonly InputAction m_PlayerMap_Movement;
    private readonly InputAction m_PlayerMap_Running;
    private readonly InputAction m_PlayerMap_Interaction;
    public struct PlayerMapActions
    {
        private @GameControlls m_Wrapper;
        public PlayerMapActions(@GameControlls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movement => m_Wrapper.m_PlayerMap_Movement;
        public InputAction @Running => m_Wrapper.m_PlayerMap_Running;
        public InputAction @Interaction => m_Wrapper.m_PlayerMap_Interaction;
        public InputActionMap Get() { return m_Wrapper.m_PlayerMap; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerMapActions set) { return set.Get(); }
        public void SetCallbacks(IPlayerMapActions instance)
        {
            if (m_Wrapper.m_PlayerMapActionsCallbackInterface != null)
            {
                @Movement.started -= m_Wrapper.m_PlayerMapActionsCallbackInterface.OnMovement;
                @Movement.performed -= m_Wrapper.m_PlayerMapActionsCallbackInterface.OnMovement;
                @Movement.canceled -= m_Wrapper.m_PlayerMapActionsCallbackInterface.OnMovement;
                @Running.started -= m_Wrapper.m_PlayerMapActionsCallbackInterface.OnRunning;
                @Running.performed -= m_Wrapper.m_PlayerMapActionsCallbackInterface.OnRunning;
                @Running.canceled -= m_Wrapper.m_PlayerMapActionsCallbackInterface.OnRunning;
                @Interaction.started -= m_Wrapper.m_PlayerMapActionsCallbackInterface.OnInteraction;
                @Interaction.performed -= m_Wrapper.m_PlayerMapActionsCallbackInterface.OnInteraction;
                @Interaction.canceled -= m_Wrapper.m_PlayerMapActionsCallbackInterface.OnInteraction;
            }
            m_Wrapper.m_PlayerMapActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Movement.started += instance.OnMovement;
                @Movement.performed += instance.OnMovement;
                @Movement.canceled += instance.OnMovement;
                @Running.started += instance.OnRunning;
                @Running.performed += instance.OnRunning;
                @Running.canceled += instance.OnRunning;
                @Interaction.started += instance.OnInteraction;
                @Interaction.performed += instance.OnInteraction;
                @Interaction.canceled += instance.OnInteraction;
            }
        }
    }
    public PlayerMapActions @PlayerMap => new PlayerMapActions(this);

    // GeneralMap
    private readonly InputActionMap m_GeneralMap;
    private IGeneralMapActions m_GeneralMapActionsCallbackInterface;
    private readonly InputAction m_GeneralMap_PauseUnpause;
    public struct GeneralMapActions
    {
        private @GameControlls m_Wrapper;
        public GeneralMapActions(@GameControlls wrapper) { m_Wrapper = wrapper; }
        public InputAction @PauseUnpause => m_Wrapper.m_GeneralMap_PauseUnpause;
        public InputActionMap Get() { return m_Wrapper.m_GeneralMap; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GeneralMapActions set) { return set.Get(); }
        public void SetCallbacks(IGeneralMapActions instance)
        {
            if (m_Wrapper.m_GeneralMapActionsCallbackInterface != null)
            {
                @PauseUnpause.started -= m_Wrapper.m_GeneralMapActionsCallbackInterface.OnPauseUnpause;
                @PauseUnpause.performed -= m_Wrapper.m_GeneralMapActionsCallbackInterface.OnPauseUnpause;
                @PauseUnpause.canceled -= m_Wrapper.m_GeneralMapActionsCallbackInterface.OnPauseUnpause;
            }
            m_Wrapper.m_GeneralMapActionsCallbackInterface = instance;
            if (instance != null)
            {
                @PauseUnpause.started += instance.OnPauseUnpause;
                @PauseUnpause.performed += instance.OnPauseUnpause;
                @PauseUnpause.canceled += instance.OnPauseUnpause;
            }
        }
    }
    public GeneralMapActions @GeneralMap => new GeneralMapActions(this);
    private int m_KeyboardandMouseSchemeIndex = -1;
    public InputControlScheme KeyboardandMouseScheme
    {
        get
        {
            if (m_KeyboardandMouseSchemeIndex == -1) m_KeyboardandMouseSchemeIndex = asset.FindControlSchemeIndex("Keyboard and Mouse");
            return asset.controlSchemes[m_KeyboardandMouseSchemeIndex];
        }
    }
    public interface IPlayerMapActions
    {
        void OnMovement(InputAction.CallbackContext context);
        void OnRunning(InputAction.CallbackContext context);
        void OnInteraction(InputAction.CallbackContext context);
    }
    public interface IGeneralMapActions
    {
        void OnPauseUnpause(InputAction.CallbackContext context);
    }
}
